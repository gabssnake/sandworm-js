import {node as builder} from './builder';

export default () => [
  builder({
    name: 'child_process',
    methods: [
      {name: 'exec'},
      {name: 'execFile'},
      {name: 'fork'},
      {name: 'spawn'},
      {name: 'execFileSync'},
      {name: 'execSync'},
      {name: 'spawnSync'},
    ],
  }),
  builder({
    name: 'cluster',
    methods: [{name: 'disconnect'}, {name: 'fork'}, {name: 'setupPrimary'}, {name: 'setupMaster'}],
  }),
  builder({
    name: 'dgram',
    methods: [{name: 'createSocket'}],
  }),
  builder({
    name: 'dns',
    methods: [
      {name: 'Resolver', isConstructor: true},
      {name: 'getServers'},
      {name: 'lookup'},
      {name: 'lookupService'},
      {name: 'resolve'},
      {name: 'resolve4'},
      {name: 'resolve6'},
      {name: 'resolveAny'},
      {name: 'resolveCname'},
      {name: 'resolveCaa'},
      {name: 'resolveMx'},
      {name: 'resolveNaptr'},
      {name: 'resolveNs'},
      {name: 'resolvePtr'},
      {name: 'resolveSoa'},
      {name: 'resolveSrv'},
      {name: 'resolveTxt'},
      {name: 'reverse'},
      {name: 'setDefaultResultOrder'},
      {name: 'setServers'},
    ],
  }),
  {
    name: 'fetch',
    methods: [{name: 'fetch'}],
    originalRoot: () => global,
    available: typeof global !== 'undefined' && typeof global.fetch !== 'undefined',
  },
  builder({
    name: 'fs',
    methods: [
      // Callback API
      {name: 'access'},
      {name: 'appendFile'},
      {name: 'chmod'},
      {name: 'chown'},
      {name: 'close'},
      {name: 'copyFile'},
      {name: 'cp'},
      {name: 'createReadStream'},
      {name: 'createWriteStream'},
      {name: 'exists'},
      {name: 'fchmod'},
      {name: 'fchown'},
      {name: 'fdatasync'},
      {name: 'fstat'},
      {name: 'fsync'},
      {name: 'ftruncate'},
      {name: 'futimes'},
      {name: 'lchmod'},
      {name: 'lchown'},
      {name: 'lutimes'},
      {name: 'link'},
      {name: 'lstat'},
      {name: 'mkdir'},
      {name: 'mkdtemp'},
      {name: 'open'},
      {name: 'opendir'},
      {name: 'read'},
      {name: 'readdir'},
      {name: 'readFile'},
      {name: 'readlink'},
      {name: 'readv'},
      {name: 'realpath'},
      {name: 'rename'},
      {name: 'rmdir'},
      {name: 'rm'},
      {name: 'stat'},
      {name: 'symlink'},
      {name: 'truncate'},
      {name: 'unlink'},
      {name: 'unwatchFile'},
      {name: 'utimes'},
      {name: 'watch'},
      {name: 'watchFile'},
      {name: 'write'},
      {name: 'writeFile'},
      {name: 'writev'},
      // Synchronous API
      {name: 'accessSync'},
      {name: 'appendFileSync'},
      {name: 'chmodSync'},
      {name: 'chownSync'},
      {name: 'closeSync'},
      {name: 'copyFileSync'},
      {name: 'cpSync'},
      {name: 'existsSync'},
      {name: 'fchmodSync'},
      {name: 'fchownSync'},
      {name: 'fdatasyncSync'},
      {name: 'fstatSync'},
      {name: 'fsyncSync'},
      {name: 'ftruncateSync'},
      {name: 'futimesSync'},
      {name: 'lchmodSync'},
      {name: 'lchownSync'},
      {name: 'lutimesSync'},
      {name: 'linkSync'},
      {name: 'lstatSync'},
      {name: 'mkdirSync'},
      {name: 'mkdtempSync'},
      {name: 'openSync'},
      {name: 'opendirSync'},
      {name: 'readSync'},
      {name: 'readdirSync'},
      {name: 'readFileSync'},
      {name: 'readlinkSync'},
      {name: 'readvSync'},
      {name: 'realpathSync'},
      {name: 'renameSync'},
      {name: 'rmdirSync'},
      {name: 'rmSync'},
      {name: 'statSync'},
      {name: 'symlinkSync'},
      {name: 'truncateSync'},
      {name: 'unlinkSync'},
      {name: 'utimesSync'},
      {name: 'watchFileSync'},
      {name: 'writeSync'},
      {name: 'writeFileSync'},
      {name: 'writevSync'},
    ],
  }),
  builder({
    name: 'fs/promises',
    methods: [
      {name: 'access'},
      {name: 'appendFile'},
      {name: 'chmod'},
      {name: 'chown'},
      {name: 'copyFile'},
      {name: 'cp'},
      {name: 'lchmod'},
      {name: 'lchown'},
      {name: 'lutimes'},
      {name: 'link'},
      {name: 'lstat'},
      {name: 'mkdir'},
      {name: 'mkdtemp'},
      {name: 'open'},
      {name: 'opendir'},
      {name: 'readdir'},
      {name: 'readFile'},
      {name: 'readlink'},
      {name: 'realpath'},
      {name: 'rename'},
      {name: 'rmdir'},
      {name: 'rm'},
      {name: 'stat'},
      {name: 'symlink'},
      {name: 'truncate'},
      {name: 'unlink'},
      {name: 'utimes'},
      {name: 'watch'},
      {name: 'writeFile'},
    ],
  }),
  builder({
    name: 'http',
    methods: [
      {name: 'Agent', isConstructor: true},
      {name: 'createServer'},
      {name: 'get'},
      {name: 'request'},
    ],
  }),
  builder({
    name: 'http2',
    methods: [
      {name: 'createServer'},
      {name: 'createSecureServer'},
      {name: 'connect'},
      {name: 'getDefaultSettings'},
      {name: 'getPackedSettings'},
      {name: 'getUnpackedSettings'},
    ],
  }),
  builder({
    name: 'https',
    methods: [
      {name: 'Agent', isConstructor: true},
      {name: 'createServer'},
      {name: 'get'},
      {name: 'request'},
    ],
  }),
  builder({
    name: 'inspector',
    methods: [
      {name: 'close'},
      {name: 'open'},
      {name: 'url'},
      {name: 'waitForDebugger'},
      {name: 'Session', isConstructor: true},
    ],
  }),
  builder({
    name: 'net',
    methods: [
      {name: 'Server', isConstructor: true},
      {name: 'Socket', isConstructor: true},
      {name: 'connect'},
      {name: 'createConnection'},
      {name: 'createServer'},
      {name: 'isIP'},
      {name: 'isIPv4'},
      {name: 'isIPv6'},
    ],
  }),
  builder({
    name: 'os',
    methods: [
      {name: 'arch'},
      {name: 'cpus'},
      {name: 'endianness'},
      {name: 'freemem'},
      {name: 'getPriority'},
      {name: 'homedir'},
      {name: 'hostname'},
      {name: 'loadavg'},
      {name: 'networkInterfaces'},
      {name: 'platform'},
      {name: 'release'},
      {name: 'setPriority'},
      {name: 'tmpdir'},
      {name: 'totalmem'},
      {name: 'type'},
      {name: 'uptime'},
      {name: 'userInfo'},
      {name: 'version'},
    ],
  }),
  builder({
    name: 'process',
    methods: [
      {name: 'abort'},
      {name: 'chdir'},
      {name: 'cpuUsage'},
      {name: 'cwd'},
      {name: 'disconnect'},
      {name: 'dlopen'},
      {name: 'emitWarning'},
      {name: 'exit'},
      {name: 'getActiveResourcesInfo'},
      {name: 'getegid'},
      {name: 'geteuid'},
      {name: 'getgid'},
      {name: 'getgroups'},
      {name: 'getuid'},
      {name: 'hasUncaughtExceptionCaptureCallback'},
      {name: 'hrtime'},
      {name: 'initgroups'},
      {name: 'kill'},
      {name: 'memoryUsage'},
      {name: 'resourceUsage'},
      {name: 'send'},
      {name: 'setegid'},
      {name: 'seteuid'},
      {name: 'setgid'},
      {name: 'setgroups'},
      {name: 'setuid'},
      {name: 'setSourceMapsEnabled'},
      {name: 'setUncaughtExceptionCaptureCallback'},
      {name: 'umask'},
      {name: 'uptime'},
      {name: 'on'},
    ],
  }),
  builder({
    name: 'timers',
    methods: [
      {name: 'setImmediate'},
      {name: 'setInterval'},
      {name: 'setTimeout'},
      {name: 'clearImmediate'},
      {name: 'clearInterval'},
      {name: 'clearTimeout'},
    ],
  }),
  builder({
    name: 'timers/promises',
    methods: [{name: 'setImmediate'}, {name: 'setInterval'}, {name: 'setTimeout'}],
  }),
  builder({
    name: 'tls',
    methods: [
      {name: 'Server', isConstructor: true},
      {name: 'TLSSocket', isConstructor: true},
      {name: 'checkServerIdentity'},
      {name: 'connect'},
      {name: 'createSecureContext'},
      {name: 'createSecurePair'},
      {name: 'createServer'},
      {name: 'getCiphers'},
    ],
  }),
  builder({
    name: 'trace_events',
    methods: [{name: 'createTracing'}, {name: 'getEnabledCategories'}],
  }),
  builder({
    name: 'v8',
    methods: [
      {name: 'cachedDataVersionTag'},
      {name: 'getHeapCodeStatistics'},
      {name: 'getHeapSnapshot'},
      {name: 'getHeapSpaceStatistics'},
      {name: 'getHeapStatistics'},
      {name: 'setFlagsFromString'},
      {name: 'stopCoverage'},
      {name: 'takeCoverage'},
      {name: 'writeHeapSnapshot'},
      {name: 'serialize'},
      {name: 'deserialize'},
    ],
  }),
  builder({
    name: 'vm',
    methods: [
      {name: 'Script', isConstructor: true},
      {name: 'SourceTextModule', isConstructor: true},
      {name: 'SyntheticModule', isConstructor: true},
      {name: 'compileFunction'},
      {name: 'createContext'},
      {name: 'isContext'},
      {name: 'measureMemory'},
      {name: 'runInContext'},
      {name: 'runInNewContext'},
      {name: 'runInThisContext'},
    ],
  }),
  builder({
    name: 'wasi',
    methods: [{name: 'WASI', isConstructor: true}],
  }),
  builder({
    name: 'worker_threads',
    methods: [
      {name: 'Worker', isConstructor: true},
      {name: 'getEnvironmentData'},
      {name: 'markAsUntransferable'},
      {name: 'moveMessagePortToContext'},
      {name: 'receiveMessageOnPort'},
      {name: 'setEnvironmentData'},
    ],
  }),
];
